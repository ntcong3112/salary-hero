openapi: 3.0.3
info:
  title: Moltres - 1.0.0
  description: As one of the legendary pok√©mon, Moltres is one of our core micro-service in our Platform which is responsible for communication delivery. It is intended to be an extensible, scalable, non-blocking, multi-tenants service which supports various external providers, from SMS, email, push notification to further OTT services like Zalo and Viber.
  version: 1.0.0
tags:
  - name: email
    description: send email
paths:
  /email:
    post:
      tags:
        - email
      summary: Send email
      description: Send an instant email to 1 user
      parameters:
        - in: header
          name: accept-language
          description: The language of template, follow this language codes https://www.w3schools.com/tags/ref_language_codes.asp. If accept-language is empty, Moltres will automatically choose one
          schema:
            type: string
          examples:
            English:
              value: en
            Indonesian:
              value: id
            Vietnamese:
              value: vi
      requestBody:
        description: parameters of an email need to send
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Email"
              required:
                - toEmail
                - templateName
      responses:
        "200":
          description: Email is being queued to send
        "404":
          description: Template not found
        "400":
          description: Bad request, missing or invalid body parameters
  /email/batch:
    post:
      tags:
        - email
      summary: Send email
      description: Send batch email to N destinations (same content, subject send to N destinations, N maximum default is 50)
      parameters:
        - in: header
          name: accept-language
          description: The language of template, follow this language codes https://www.w3schools.com/tags/ref_language_codes.asp. If accept-language is empty, Moltres will automatically choose one
          schema:
            type: string
          examples:
            English:
              value: en
            Indonesian:
              value: id
            Vietnamese:
              value: vi
      requestBody:
        description: same as same one email but toEmail now is an array to send batch email
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Emails"
              required:
                - toEmail
                - templateName
      responses:
        "200":
          description: Email is being queued to send
        "404":
          description: Template not found
        "400":
          description: Bad request, missing or invalid body parameters
  /email/multiple:
    post:
      tags:
        - email
      summary: Send email
      description: Send N email to N user(each email has seprate destination, seprate template name and seprate parameters)
      parameters:
        - in: header
          name: accept-language
          description: The language of template, follow this language codes https://www.w3schools.com/tags/ref_language_codes.asp. If accept-language is empty, Moltres will automatically choose one
          schema:
            type: string
          examples:
            English:
              value: en
            Indonesian:
              value: id
            Vietnamese:
              value: vi
      requestBody:
        description: array of emails need to send
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Email"
      responses:
        "200":
          description: Email is being queued to send
        "404":
          description: Template not found
        "400":
          description: Bad request, missing or invalid body parameters
components:
  schemas:
    Email:
      type: object
      required:
        - toEmail
        - templateName
      properties:
        toEmail:
          type: string
          example: example@gmail.com
        templateName:
          type: string
          example: INVITE PARTNER
        params:
          type: object
          properties:
            subject:
              type: object
              description: all parameters for the subject, it can be ommitted or empty if content doesn't have any parameters, keys and values can be string, number based on template, keys even can be an array follow the HandleBars pattern
              example:
                "0": "subjectparams1@gmail.com"
                "abc": "subjectparams2"
            content:
              type: object
              description: all parameters for the content, it can be ommitted or empty if content doesn't have any parameters, keys and values can be string, number based on template, keys even can be an array follow the HandleBars pattern
              example:
                "0": "contentParams123"
                "1": "Hello World"
                "arrayInvoices": [
                  {
                    "name": "television",
                    "price": "10",
                  },
                  {
                    "name": "cat",
                    "price": "50",
                  }
                ]
    Emails:
      type: object
      required:
        - toEmail
        - templateName
      properties:
        toEmail:
          type: array
          items:
            type: string
          example: [abc@gmail.com, xyz@gmail.com, abcxyz@gmail.com]
        templateName:
          type: string
          example: INVITE PARTNER
        params:
          type: object
          properties:
            subject:
              type: object
              description: all parameters for the subject, it can be ommitted or empty if content doesn't have any parameters, keys and values can be string, number based on template, keys even can be an array follow the HandleBars pattern
              example:
                "0": "subjectparams1@gmail.com"
                "abc": "subjectparams2"
            content:
              type: object
              description: all parameters for the content, it can be ommitted or empty if content doesn't have any parameters, keys and values can be string, number based on template, keys even can be an array follow the HandleBars pattern
              example:
                "0": "contentParams123"
                "1": "Hello World"
                "arrayInvoices": [
                  {
                    "name": "television",
                    "price": "10",
                  },
                  {
                    "name": "cat",
                    "price": "50",
                  }
                ]
